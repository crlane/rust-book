#[macro_use]
extern crate clap;

const VERSION: &'static str = env!("CARGO_PKG_VERSION");
const NAME: &'static str = env!("CARGO_PKG_NAME");
const AUTHOR: &'static str = env!("CARGO_PKG_AUTHORS");
const DESCRIPTION: &'static str = env!("CARGO_PKG_DESCRIPTION");

// struct ApplicationConfig {
// }


// fn load_defaults(str config_file) {
//     // order of precedence is as follows:
//     // 1) Command line arguments
//     // 2) Environment variables
//     // 3) Config file
// }

fn main() {
    let matches = clap_app!(rmuxinator =>
        (version: VERSION)
        (author: AUTHOR)
        (about: DESCRIPTION)
        (@arg CONFIG: -c --config +takes_value "Sets a custom config file for new projects")
        (@subcommand commands =>
            (about: format!("List commands available in {}", NAME).as_str())
        )
        (@subcommand completions =>
            (about: "Used for shell completion")
        )
        (@subcommand copy =>
            (about: "Copy an existing project to a new project and open it in your editor")
        )
        (@subcommand debug =>
            (about: format!("output the shell comands that are generated by {}", NAME).as_str())
        )
        (@subcommand delete =>
            (about: "Deletes the given project")
        )
        (@subcommand doctor =>
            (about: "Look for problems in your configuration")
        )
        (@subcommand help =>
            (about: "Describe available commands or one specific command")
        )
        (@subcommand implode =>
            (about: "Delete all rmuxinator projects")
        )
        (@subcommand list =>
            (about: "List all rmuxinator projects")
        )
        (@subcommand local =>
            (about: "Start a tmux session using a ./(t|r)muxinator.yml")
        )
        (@subcommand new =>
            (about: "Create a new project file and open it in your editor")
            (@arg PROJECT: +required "Project name")
        )
        (@subcommand start =>
            (about: "Start a tmux session using a project's (r|t)muxinator config, with an optional [ALIAS]")
        )
        (@subcommand stop =>
            (about: "Stop a tmux session using a project's (r|t)muxinator config")
        )
        (@subcommand version =>
            (about: "Display installed tmuxinator version")
        )
    ).get_matches();


    // Gets a value for config if supplied by user, or defaults to "default.conf"
    let config = matches.value_of("config").unwrap_or("~/.tmuxinator.yml");
    // println!("Value for config: {}", config);

    // Calling .unwrap() is safe here because "INPUT" is required (if "INPUT" wasn't
    // required we could have used an 'if let' to conditionally get the value)
    // println!("Using input file: {}", matches.value_of("INPUT").unwrap());

    // Vary the output based on how many times the user used the "verbose" flag
    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'
    // match matches.occurrences_of("v") {
    //     0 => println!("No verbose info"),
    //     1 => println!("Some verbose info"),
    //     2 => println!("Tons of verbose info"),
    //     3 | _ => println!("Don't be crazy"),
    // }

    // You can handle information about subcommands by requesting their matches by name
    // (as below), requesting just the name used, or both at the same time
    if let Some(matches) = matches.subcommand_matches("version") {
        let version_string = format!("{} {}", NAME, VERSION);
        println!("{}", version_string.as_str());
        if matches.is_present("debug") {
            println!("\nPrinting other debug info...");
        }
    }
    else if let Some(matches) = matches.subcommand_matches("new") {
        let version_string = format!("{} {}", NAME, VERSION);
        println!("{}", version_string.as_str());
        if matches.is_present("debug") {
            println!("\nPrinting other debug info...");
        }
    }
    else if let Some(matches) = matches.subcommand_matches("new") {
        let version_string = format!("{} {}", NAME, VERSION);
        println!("{}", version_string.as_str());
        if matches.is_present("debug") {
            println!("\nPrinting other debug info...");
        }
    }
}
